{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9","program":"C:\\Users\\1an6r_000\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","regex","C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"aho-corasick\"","--cfg","feature=\"default\"","--cfg","feature=\"memchr\"","--cfg","feature=\"perf\"","--cfg","feature=\"perf-cache\"","--cfg","feature=\"perf-dfa\"","--cfg","feature=\"perf-inline\"","--cfg","feature=\"perf-literal\"","--cfg","feature=\"std\"","--cfg","feature=\"thread_local\"","--cfg","feature=\"unicode\"","--cfg","feature=\"unicode-age\"","--cfg","feature=\"unicode-bool\"","--cfg","feature=\"unicode-case\"","--cfg","feature=\"unicode-gencat\"","--cfg","feature=\"unicode-perl\"","--cfg","feature=\"unicode-script\"","--cfg","feature=\"unicode-segment\"","-C","metadata=43fec13828bacf78","-C","extra-filename=-43fec13828bacf78","--out-dir","z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","-L","dependency=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","--extern","aho_corasick=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libaho_corasick-6dd48c0f26a19bc1.rmeta","--extern","memchr=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libmemchr-266e217fb8e2b36e.rmeta","--extern","regex_syntax=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libregex_syntax-4f08a2c397d73f71.rmeta","--extern","thread_local=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libthread_local-1cefbc299575065b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\1an6r_000\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libregex-43fec13828bacf78.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[5372576970847076933,6209381655718344991]},"crate_root":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src","external_crates":[{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[485752663891264790,8957311619763174036]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[18086859731710399847,10284985903167786594]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7894171165123925799,1138153282057520136]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13588323328630583110,6322937768936249793]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4981221114026975734,7560613652030165248]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14761482230397314318,7759443649452366185]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9184279872459162418,17237017963472574266]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17533675247542074538,1761975124356943313]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7993782675770172864,12706040849351126287]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2821791754508214868,4424070148662641494]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[910629799165843388,8471953781625026915]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[5889018422681230134,5892037208047200338]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2601722915210761880,4253013904849941641]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":14,"id":{"name":"aho_corasick","disambiguator":[8567478971511304610,1513720283916029320]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":15,"id":{"name":"memchr","disambiguator":[3280194916991939476,9578496728471696879]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":16,"id":{"name":"regex_syntax","disambiguator":[14974878335881224684,2095850643238489652]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":17,"id":{"name":"thread_local","disambiguator":[15101340570104925201,8770628054772275971]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[11604323919212108113,13640846257072370299]}}],"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":0,"byte_end":28646,"line_start":1,"line_end":786,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1648},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":23871,"byte_end":23876,"line_start":640,"line_end":640,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":23935,"byte_end":23936,"line_start":642,"line_end":642,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":23991,"byte_end":23992,"line_start":644,"line_end":644,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24043,"byte_end":24044,"line_start":646,"line_end":646,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24120,"byte_end":24126,"line_start":650,"line_end":650,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24128,"byte_end":24144,"line_start":650,"line_end":650,"column_start":13,"column_end":29},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24146,"byte_end":24160,"line_start":650,"line_end":650,"column_start":31,"column_end":45},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1203},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24162,"byte_end":24174,"line_start":650,"line_end":650,"column_start":47,"column_end":59},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24176,"byte_end":24184,"line_start":650,"line_end":650,"column_start":61,"column_end":69},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24190,"byte_end":24199,"line_start":651,"line_end":651,"column_start":5,"column_end":14},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24201,"byte_end":24206,"line_start":651,"line_end":651,"column_start":16,"column_end":21},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1305},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24208,"byte_end":24215,"line_start":651,"line_end":651,"column_start":23,"column_end":30},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24217,"byte_end":24225,"line_start":651,"line_end":651,"column_start":32,"column_end":40},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2369},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24227,"byte_end":24232,"line_start":651,"line_end":651,"column_start":42,"column_end":47},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24234,"byte_end":24242,"line_start":651,"line_end":651,"column_start":49,"column_end":57},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2381},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24244,"byte_end":24255,"line_start":651,"line_end":651,"column_start":59,"column_end":70},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24257,"byte_end":24262,"line_start":651,"line_end":651,"column_start":72,"column_end":77},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24268,"byte_end":24274,"line_start":652,"line_end":652,"column_start":5,"column_end":11},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":24276,"byte_end":24293,"line_start":652,"line_end":652,"column_start":13,"column_end":30},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27755,"byte_end":27756,"line_start":744,"line_end":744,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27793,"byte_end":27794,"line_start":745,"line_end":745,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27818,"byte_end":27819,"line_start":746,"line_end":746,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27848,"byte_end":27849,"line_start":747,"line_end":747,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":36}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28446,"byte_end":28454,"line_start":781,"line_end":781,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28475,"byte_end":28479,"line_start":782,"line_end":782,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28481,"byte_end":28492,"line_start":782,"line_end":782,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28515,"byte_end":28519,"line_start":783,"line_end":783,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28521,"byte_end":28530,"line_start":783,"line_end":783,"column_start":27,"column_end":36},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28532,"byte_end":28537,"line_start":783,"line_end":783,"column_start":38,"column_end":43},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28539,"byte_end":28546,"line_start":783,"line_end":783,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1836},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28570,"byte_end":28585,"line_start":784,"line_end":784,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28606,"byte_end":28615,"line_start":785,"line_end":785,"column_start":20,"column_end":29},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28617,"byte_end":28621,"line_start":785,"line_end":785,"column_start":31,"column_end":35},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28623,"byte_end":28633,"line_start":785,"line_end":785,"column_start":37,"column_end":47},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1378}},{"kind":"Use","ref_id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28635,"byte_end":28642,"line_start":785,"line_end":785,"column_start":49,"column_end":56},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1378}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":0,"byte_end":28646,"line_start":1,"line_end":786,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":36},{"krate":0,"index":41},{"krate":0,"index":70},{"krate":0,"index":86},{"krate":0,"index":211},{"krate":0,"index":344},{"krate":0,"index":353},{"krate":0,"index":510},{"krate":0,"index":532},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":640},{"krate":0,"index":742},{"krate":0,"index":770},{"krate":0,"index":813},{"krate":0,"index":818},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1110},{"krate":0,"index":1343},{"krate":0,"index":1365},{"krate":0,"index":1378}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":23209,"byte_end":23231,"line_start":616,"line_end":616,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27716,"byte_end":27721,"line_start":743,"line_end":743,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":27684,"byte_end":27707,"line_start":742,"line_end":742,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":43100,"byte_end":43108,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":43519,"byte_end":43522,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":44117,"byte_end":44127,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":44872,"byte_end":44877,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":45160,"byte_end":45169,"line_start":84,"line_end":84,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":45652,"byte_end":45655,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":45890,"byte_end":45897,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":46251,"byte_end":46258,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1649},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":160801,"byte_end":160807,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1652},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":160927,"byte_end":160941,"line_start":11,"line_end":11,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":161228,"byte_end":161243,"line_start":18,"line_end":18,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1648},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":160765,"byte_end":160770,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1655}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":163882,"byte_end":163886,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1662},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":164246,"byte_end":164256,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1664},{"krate":0,"index":1665}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":164508,"byte_end":164521,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":166795,"byte_end":166806,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":167407,"byte_end":167410,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":167736,"byte_end":167744,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":168059,"byte_end":168070,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":168568,"byte_end":168577,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":168892,"byte_end":168895,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":169386,"byte_end":169406,"line_start":181,"line_end":181,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":169974,"byte_end":169979,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":170250,"byte_end":170259,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":170382,"byte_end":170389,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":173614,"byte_end":173619,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":202524,"byte_end":202539,"line_start":1138,"line_end":1138,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205646,"byte_end":205662,"line_start":1237,"line_end":1237,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205791,"byte_end":205807,"line_start":1243,"line_end":1243,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206012,"byte_end":206020,"line_start":1251,"line_end":1251,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205984,"byte_end":205998,"line_start":1250,"line_end":1250,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206407,"byte_end":206419,"line_start":1261,"line_end":1261,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206379,"byte_end":206393,"line_start":1260,"line_end":1260,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206545,"byte_end":206555,"line_start":1266,"line_end":1266,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206686,"byte_end":206700,"line_start":1271,"line_end":1271,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":206875,"byte_end":206890,"line_start":1276,"line_end":1276,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207048,"byte_end":207067,"line_start":1281,"line_end":1281,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207254,"byte_end":207267,"line_start":1287,"line_end":1287,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207424,"byte_end":207437,"line_start":1294,"line_end":1294,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207612,"byte_end":207628,"line_start":1300,"line_end":1300,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":230812,"byte_end":230819,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":230801,"byte_end":230890,"line_start":15,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":230991,"byte_end":230999,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231126,"byte_end":231132,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231378,"byte_end":231382,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231476,"byte_end":231480,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231607,"byte_end":231610,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231755,"byte_end":231763,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231871,"byte_end":231874,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":231995,"byte_end":232003,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232129,"byte_end":232134,"line_start":69,"line_end":69,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input: fmt::Debug","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232219,"byte_end":232221,"line_start":71,"line_end":71,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232398,"byte_end":232407,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232588,"byte_end":232601,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232741,"byte_end":232755,"line_start":85,"line_end":85,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232862,"byte_end":232871,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":233021,"byte_end":233024,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":233086,"byte_end":233094,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":233205,"byte_end":233213,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234017,"byte_end":234026,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234006,"byte_end":234041,"line_start":142,"line_end":142,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234145,"byte_end":234148,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240296,"byte_end":240300,"line_start":348,"line_end":348,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240285,"byte_end":240306,"line_start":348,"line_end":348,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240285,"byte_end":240306,"line_start":348,"line_end":348,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240624,"byte_end":240631,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240603,"byte_end":240612,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240835,"byte_end":240843,"line_start":370,"line_end":370,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240814,"byte_end":240823,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241066,"byte_end":241078,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241572,"byte_end":241584,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1836},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":244186,"byte_end":244201,"line_start":16,"line_end":16,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::imp::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":245257,"byte_end":245262,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":245413,"byte_end":245421,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":245614,"byte_end":245622,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":246483,"byte_end":246491,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":246693,"byte_end":246697,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":246665,"byte_end":246679,"line_start":83,"line_end":83,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":247386,"byte_end":247396,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":247784,"byte_end":247792,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":248217,"byte_end":248221,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":248788,"byte_end":248791,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":248926,"byte_end":248929,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":249038,"byte_end":249046,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":249162,"byte_end":249165,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":249577,"byte_end":249593,"line_start":167,"line_end":167,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252082,"byte_end":252087,"line_start":236,"line_end":236,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::imp::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252093,"byte_end":252098,"line_start":237,"line_end":237,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::imp::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252114,"byte_end":252120,"line_start":238,"line_end":238,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::imp::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252136,"byte_end":252138,"line_start":239,"line_end":239,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::imp::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252159,"byte_end":252165,"line_start":240,"line_end":240,"column_start":5,"column_end":11},"name":"Packed","qualname":"::literal::imp::LiteralIter::Packed","value":"LiteralIter::Packed(&'a [Literal])","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252060,"byte_end":252071,"line_start":235,"line_end":235,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::imp::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, Packed}","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":698}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":256483,"byte_end":256494,"line_start":380,"line_end":380,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::imp::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":258943,"byte_end":258947,"line_start":456,"line_end":456,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":258915,"byte_end":258929,"line_start":455,"line_end":455,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":259781,"byte_end":259790,"line_start":482,"line_end":482,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":259753,"byte_end":259767,"line_start":481,"line_end":481,"column_start":41,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":259965,"byte_end":259968,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":260028,"byte_end":260036,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":295519,"byte_end":295526,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":295596,"byte_end":295601,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":295766,"byte_end":295773,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":295907,"byte_end":295915,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296008,"byte_end":296024,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296381,"byte_end":296386,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296500,"byte_end":296512,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296591,"byte_end":296600,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296724,"byte_end":296732,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":296921,"byte_end":296927,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1944},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":297033,"byte_end":297043,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":297125,"byte_end":297142,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1946},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":297220,"byte_end":297235,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":297326,"byte_end":297351,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":297443,"byte_end":297451,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::imp::LiteralSearcher","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":298278,"byte_end":298292,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":298418,"byte_end":298421,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":299138,"byte_end":299142,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":299456,"byte_end":299470,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":299996,"byte_end":300009,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":300216,"byte_end":300226,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":300461,"byte_end":300470,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":300618,"byte_end":300634,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1953},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":305577,"byte_end":305582,"line_start":276,"line_end":276,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1956},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":305712,"byte_end":305716,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":305851,"byte_end":305856,"line_start":282,"line_end":282,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306016,"byte_end":306025,"line_start":285,"line_end":285,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306167,"byte_end":306171,"line_start":288,"line_end":288,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306345,"byte_end":306351,"line_start":291,"line_end":291,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306549,"byte_end":306554,"line_start":295,"line_end":295,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":305148,"byte_end":305152,"line_start":268,"line_end":268,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1971}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306658,"byte_end":306666,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306864,"byte_end":306872,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306936,"byte_end":306940,"line_start":312,"line_end":312,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307095,"byte_end":307099,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307191,"byte_end":307200,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1986},{"krate":0,"index":1987}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307356,"byte_end":307361,"line_start":323,"line_end":323,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307526,"byte_end":307531,"line_start":326,"line_end":326,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1992},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307631,"byte_end":307644,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1994}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307745,"byte_end":307749,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1994},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307819,"byte_end":307823,"line_start":336,"line_end":336,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307987,"byte_end":307996,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308032,"byte_end":308039,"line_start":345,"line_end":345,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2004},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308069,"byte_end":308078,"line_start":347,"line_end":347,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308106,"byte_end":308113,"line_start":349,"line_end":349,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308187,"byte_end":308199,"line_start":351,"line_end":351,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308279,"byte_end":308294,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308329,"byte_end":308346,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308385,"byte_end":308405,"line_start":357,"line_end":357,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307939,"byte_end":307948,"line_start":341,"line_end":341,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2004},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2012},{"krate":0,"index":2014}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307930,"byte_end":308408,"line_start":341,"line_end":358,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":307930,"byte_end":308408,"line_start":341,"line_end":358,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2025},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308489,"byte_end":308497,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2027}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2026},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308598,"byte_end":308602,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2027},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308652,"byte_end":308653,"line_start":367,"line_end":367,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308745,"byte_end":308755,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":2033},{"krate":0,"index":2034}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2033},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308856,"byte_end":308860,"line_start":375,"line_end":375,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2034},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308935,"byte_end":308941,"line_start":377,"line_end":377,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":309068,"byte_end":309075,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":309919,"byte_end":309928,"line_start":409,"line_end":409,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2039},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310167,"byte_end":310176,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2040},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310277,"byte_end":310281,"line_start":422,"line_end":422,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2041},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310350,"byte_end":310355,"line_start":424,"line_end":424,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2042},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310417,"byte_end":310420,"line_start":426,"line_end":426,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310526,"byte_end":310533,"line_start":431,"line_end":431,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2047},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310752,"byte_end":310764,"line_start":4,"line_end":4,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310718,"byte_end":310740,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2048},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310775,"byte_end":310779,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310802,"byte_end":310812,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2050},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310829,"byte_end":310843,"line_start":7,"line_end":7,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2051},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310860,"byte_end":310870,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2052},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310885,"byte_end":310901,"line_start":9,"line_end":9,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2053},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310917,"byte_end":310927,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2054},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310943,"byte_end":310963,"line_start":11,"line_end":11,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2055},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":310979,"byte_end":310989,"line_start":12,"line_end":12,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2056},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":311005,"byte_end":311022,"line_start":13,"line_end":13,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2057},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":311038,"byte_end":311045,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2058},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":311061,"byte_end":311066,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2151},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330001,"byte_end":330006,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":329990,"byte_end":330068,"line_start":20,"line_end":24,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":329990,"byte_end":330068,"line_start":20,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330187,"byte_end":330192,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330166,"byte_end":330175,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330331,"byte_end":330334,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330310,"byte_end":330319,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330508,"byte_end":330513,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"range","qualname":"<Match>::range","value":"fn (&self) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the range over the starting and ending byte offsets of the\n match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330487,"byte_end":330496,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330634,"byte_end":330642,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330613,"byte_end":330622,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2171},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":331718,"byte_end":331723,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332782,"byte_end":332785,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":333516,"byte_end":333524,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":334386,"byte_end":334390,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":335106,"byte_end":335115,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":338252,"byte_end":338260,"line_start":253,"line_end":253,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":339705,"byte_end":339718,"line_start":288,"line_end":288,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":340636,"byte_end":340641,"line_start":315,"line_end":315,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":341624,"byte_end":341630,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":346380,"byte_end":346387,"line_start":455,"line_end":455,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":346844,"byte_end":346855,"line_start":469,"line_end":469,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":347324,"byte_end":347332,"line_start":483,"line_end":483,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":349809,"byte_end":349823,"line_start":554,"line_end":554,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":350211,"byte_end":350228,"line_start":564,"line_end":564,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":350672,"byte_end":350683,"line_start":578,"line_end":578,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":351080,"byte_end":351087,"line_start":588,"line_end":588,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":351761,"byte_end":351774,"line_start":609,"line_end":609,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":352281,"byte_end":352297,"line_start":623,"line_end":623,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":352842,"byte_end":352858,"line_start":641,"line_end":641,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353147,"byte_end":353153,"line_start":654,"line_end":654,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353276,"byte_end":353289,"line_start":659,"line_end":659,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353425,"byte_end":353437,"line_start":664,"line_end":664,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353648,"byte_end":353665,"line_start":670,"line_end":670,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":354012,"byte_end":354021,"line_start":679,"line_end":679,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":354511,"byte_end":354518,"line_start":692,"line_end":692,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355091,"byte_end":355105,"line_start":710,"line_end":710,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355693,"byte_end":355698,"line_start":730,"line_end":730,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":356714,"byte_end":356720,"line_start":765,"line_end":765,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":357618,"byte_end":357630,"line_start":800,"line_end":800,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2176},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":358791,"byte_end":358807,"line_start":833,"line_end":833,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359129,"byte_end":359138,"line_start":841,"line_end":841,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359496,"byte_end":359499,"line_start":849,"line_end":849,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359475,"byte_end":359484,"line_start":848,"line_end":848,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359794,"byte_end":359797,"line_start":858,"line_end":858,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359773,"byte_end":359782,"line_start":857,"line_end":857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":360157,"byte_end":360160,"line_start":869,"line_end":869,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":360136,"byte_end":360145,"line_start":868,"line_end":868,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":360794,"byte_end":360802,"line_start":885,"line_end":885,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":361737,"byte_end":361740,"line_start":911,"line_end":911,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":362025,"byte_end":362029,"line_start":917,"line_end":917,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":362461,"byte_end":362465,"line_start":926,"line_end":926,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":363476,"byte_end":363482,"line_start":946,"line_end":946,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":363793,"byte_end":363796,"line_start":955,"line_end":955,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":363772,"byte_end":363781,"line_start":954,"line_end":954,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":366952,"byte_end":366969,"line_start":1054,"line_end":1054,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":367675,"byte_end":367683,"line_start":1076,"line_end":1076,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":367969,"byte_end":367983,"line_start":1084,"line_end":1084,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":368394,"byte_end":368406,"line_start":1093,"line_end":1093,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":369137,"byte_end":369143,"line_start":1118,"line_end":1118,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":369371,"byte_end":369382,"line_start":1127,"line_end":1127,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":370679,"byte_end":370687,"line_start":1169,"line_end":1169,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":386536,"byte_end":386545,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":386874,"byte_end":386877,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":387321,"byte_end":387325,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":387620,"byte_end":387623,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":388036,"byte_end":388054,"line_start":54,"line_end":54,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389226,"byte_end":389243,"line_start":87,"line_end":87,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389296,"byte_end":389300,"line_start":89,"line_end":89,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389475,"byte_end":389484,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389580,"byte_end":389589,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389935,"byte_end":389951,"line_start":105,"line_end":105,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":390058,"byte_end":390075,"line_start":108,"line_end":108,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":390231,"byte_end":390242,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":390365,"byte_end":390372,"line_start":118,"line_end":118,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":390607,"byte_end":390623,"line_start":126,"line_end":126,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":390856,"byte_end":390865,"line_start":135,"line_end":135,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391106,"byte_end":391119,"line_start":141,"line_end":141,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1067},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391312,"byte_end":391319,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391596,"byte_end":391600,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391698,"byte_end":391703,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":392904,"byte_end":392918,"line_start":209,"line_end":209,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393128,"byte_end":393132,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393234,"byte_end":393239,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394665,"byte_end":394671,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394922,"byte_end":394927,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394911,"byte_end":394988,"line_start":29,"line_end":33,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394911,"byte_end":394988,"line_start":29,"line_end":33,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395107,"byte_end":395112,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395086,"byte_end":395095,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395251,"byte_end":395254,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395230,"byte_end":395239,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395428,"byte_end":395433,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"range","qualname":"<Match>::range","value":"fn (&self) -> Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the range over the starting and ending byte offsets of the\n match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395407,"byte_end":395416,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395554,"byte_end":395560,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395533,"byte_end":395542,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2369},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398327,"byte_end":398332,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":399274,"byte_end":399277,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":400007,"byte_end":400015,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":400891,"byte_end":400895,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":401609,"byte_end":401618,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":404698,"byte_end":404706,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":406039,"byte_end":406052,"line_start":344,"line_end":344,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":406911,"byte_end":406916,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":407871,"byte_end":407877,"line_start":393,"line_end":393,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":412387,"byte_end":412394,"line_start":505,"line_end":505,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":412851,"byte_end":412862,"line_start":519,"line_end":519,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":413331,"byte_end":413339,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":416297,"byte_end":416311,"line_start":613,"line_end":613,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":416698,"byte_end":416715,"line_start":623,"line_end":623,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":417162,"byte_end":417173,"line_start":637,"line_end":637,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":417569,"byte_end":417576,"line_start":647,"line_end":647,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":418253,"byte_end":418266,"line_start":668,"line_end":668,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":418765,"byte_end":418781,"line_start":682,"line_end":682,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419329,"byte_end":419345,"line_start":700,"line_end":700,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419633,"byte_end":419639,"line_start":713,"line_end":713,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419762,"byte_end":419775,"line_start":718,"line_end":718,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419911,"byte_end":419923,"line_start":723,"line_end":723,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":420134,"byte_end":420151,"line_start":729,"line_end":729,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":420502,"byte_end":420511,"line_start":738,"line_end":738,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1203},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":420867,"byte_end":420879,"line_start":749,"line_end":749,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":421468,"byte_end":421473,"line_start":770,"line_end":770,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":422482,"byte_end":422488,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":423897,"byte_end":423913,"line_start":850,"line_end":850,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424235,"byte_end":424244,"line_start":858,"line_end":858,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424602,"byte_end":424605,"line_start":866,"line_end":866,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424581,"byte_end":424590,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424900,"byte_end":424903,"line_start":875,"line_end":875,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424879,"byte_end":424888,"line_start":874,"line_end":874,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":425263,"byte_end":425266,"line_start":886,"line_end":886,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":425242,"byte_end":425251,"line_start":885,"line_end":885,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":425890,"byte_end":425898,"line_start":902,"line_end":902,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":426796,"byte_end":426799,"line_start":928,"line_end":928,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":427084,"byte_end":427088,"line_start":934,"line_end":934,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":427520,"byte_end":427524,"line_start":943,"line_end":943,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":428535,"byte_end":428541,"line_start":963,"line_end":963,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":428848,"byte_end":428851,"line_start":972,"line_end":972,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":428827,"byte_end":428836,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":431555,"byte_end":431572,"line_start":1056,"line_end":1056,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":432212,"byte_end":432226,"line_start":1078,"line_end":1078,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1305},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":432918,"byte_end":432925,"line_start":1101,"line_end":1101,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":433550,"byte_end":433558,"line_start":1118,"line_end":1118,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1320}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":433865,"byte_end":433879,"line_start":1126,"line_end":1126,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":434284,"byte_end":434296,"line_start":1135,"line_end":1135,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435017,"byte_end":435023,"line_start":1160,"line_end":1160,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1316},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2381},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435251,"byte_end":435262,"line_start":1169,"line_end":1169,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":436532,"byte_end":436540,"line_start":1211,"line_end":1211,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2390},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":437428,"byte_end":437437,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":437816,"byte_end":437819,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":437995,"byte_end":437998,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438060,"byte_end":438068,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438134,"byte_end":438142,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438209,"byte_end":438215,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438391,"byte_end":438399,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438527,"byte_end":438532,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1378},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28414,"byte_end":28422,"line_start":780,"line_end":780,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1388},{"krate":0,"index":1389}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\lib.rs","byte_start":28382,"byte_end":28405,"line_start":779,"line_end":779,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\backtrack.rs","byte_start":30909,"byte_end":30914,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\backtrack.rs","byte_start":31576,"byte_end":31583,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\cache.rs","byte_start":40081,"byte_end":40087,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\cache.rs","byte_start":40353,"byte_end":40364,"line_start":33,"line_end":33,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":43361,"byte_end":43369,"line_start":39,"line_end":39,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":72553,"byte_end":72557,"line_start":809,"line_end":809,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":72968,"byte_end":72977,"line_start":829,"line_end":829,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":75564,"byte_end":75572,"line_start":916,"line_end":916,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":76388,"byte_end":76400,"line_start":941,"line_end":941,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":81152,"byte_end":81163,"line_start":1072,"line_end":1072,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":82372,"byte_end":82384,"line_start":1111,"line_end":1111,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":94901,"byte_end":94907,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":97240,"byte_end":97248,"line_start":287,"line_end":287,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":97670,"byte_end":97675,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":101879,"byte_end":101884,"line_start":412,"line_end":412,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":102703,"byte_end":102713,"line_start":436,"line_end":436,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":103005,"byte_end":103008,"line_start":445,"line_end":445,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":151666,"byte_end":151674,"line_start":1609,"line_end":1609,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":152468,"byte_end":152479,"line_start":1645,"line_end":1645,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":154307,"byte_end":154317,"line_start":1699,"line_end":1699,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":154753,"byte_end":154757,"line_start":1725,"line_end":1725,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":155369,"byte_end":155374,"line_start":1756,"line_end":1756,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":155654,"byte_end":155665,"line_start":1766,"line_end":1766,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":156087,"byte_end":156101,"line_start":1780,"line_end":1780,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":156607,"byte_end":156617,"line_start":1798,"line_end":1798,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":161277,"byte_end":161282,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":161652,"byte_end":161657,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":162314,"byte_end":162319,"line_start":51,"line_end":51,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":167113,"byte_end":167124,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":176827,"byte_end":176840,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":177914,"byte_end":177924,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":188508,"byte_end":188518,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205760,"byte_end":205773,"line_start":1242,"line_end":1242,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205897,"byte_end":205901,"line_start":1248,"line_end":1248,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207732,"byte_end":207736,"line_start":1305,"line_end":1305,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207842,"byte_end":207854,"line_start":1311,"line_end":1311,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":215170,"byte_end":215187,"line_start":1510,"line_end":1510,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\expand.rs","byte_start":222209,"byte_end":222212,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\expand.rs","byte_start":222308,"byte_end":222311,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":230897,"byte_end":230904,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234052,"byte_end":234061,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234235,"byte_end":234244,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234350,"byte_end":234359,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236561,"byte_end":236570,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236799,"byte_end":236808,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236917,"byte_end":236926,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240328,"byte_end":240332,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240542,"byte_end":240546,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241787,"byte_end":241791,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241885,"byte_end":241889,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":242012,"byte_end":242016,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":242269,"byte_end":242273,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":245153,"byte_end":245168,"line_start":44,"line_end":44,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":250008,"byte_end":250015,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252207,"byte_end":252218,"line_start":243,"line_end":243,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":253641,"byte_end":253654,"line_start":297,"line_end":297,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":257571,"byte_end":257582,"line_start":406,"line_end":406,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":262901,"byte_end":262917,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":285099,"byte_end":285104,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":285353,"byte_end":285356,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":294531,"byte_end":294538,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":298309,"byte_end":298316,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":301297,"byte_end":301304,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":301480,"byte_end":301487,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306575,"byte_end":306579,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308970,"byte_end":308980,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310434,"byte_end":310443,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":311094,"byte_end":311106,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330079,"byte_end":330084,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330955,"byte_end":330960,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":331754,"byte_end":331759,"line_start":79,"line_end":79,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":331936,"byte_end":331941,"line_start":86,"line_end":86,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332246,"byte_end":332251,"line_start":97,"line_end":97,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332335,"byte_end":332340,"line_start":103,"line_end":103,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332551,"byte_end":332556,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":349008,"byte_end":349013,"line_start":532,"line_end":532,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353077,"byte_end":353082,"line_start":652,"line_end":652,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":354594,"byte_end":354601,"line_start":694,"line_end":694,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355195,"byte_end":355209,"line_start":714,"line_end":714,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355784,"byte_end":355789,"line_start":735,"line_end":735,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":356801,"byte_end":356807,"line_start":770,"line_end":770,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":357699,"byte_end":357711,"line_start":802,"line_end":802,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359165,"byte_end":359181,"line_start":843,"line_end":843,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":360919,"byte_end":360927,"line_start":891,"line_end":891,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":363872,"byte_end":363880,"line_start":960,"line_end":960,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":364107,"byte_end":364120,"line_start":968,"line_end":968,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":365611,"byte_end":365619,"line_start":1013,"line_end":1013,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":366268,"byte_end":366276,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":367073,"byte_end":367090,"line_start":1059,"line_end":1059,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":369465,"byte_end":369476,"line_start":1129,"line_end":1129,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":370065,"byte_end":370066,"line_start":1151,"line_end":1151,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":370730,"byte_end":370738,"line_start":1171,"line_end":1171,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":386564,"byte_end":386573,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":388127,"byte_end":388145,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391479,"byte_end":391486,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391770,"byte_end":391777,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393004,"byte_end":393018,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393312,"byte_end":393326,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394999,"byte_end":395004,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395977,"byte_end":395982,"line_start":74,"line_end":74,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398363,"byte_end":398368,"line_start":138,"line_end":138,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398545,"byte_end":398550,"line_start":145,"line_end":145,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398738,"byte_end":398743,"line_start":153,"line_end":153,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398827,"byte_end":398832,"line_start":159,"line_end":159,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":399043,"byte_end":399048,"line_start":169,"line_end":169,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":415504,"byte_end":415509,"line_start":591,"line_end":591,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419563,"byte_end":419568,"line_start":711,"line_end":711,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":420948,"byte_end":420960,"line_start":751,"line_end":751,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":421559,"byte_end":421564,"line_start":775,"line_end":775,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":422569,"byte_end":422575,"line_start":810,"line_end":810,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424271,"byte_end":424287,"line_start":860,"line_end":860,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":426014,"byte_end":426022,"line_start":908,"line_end":908,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":428927,"byte_end":428935,"line_start":977,"line_end":977,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":429162,"byte_end":429175,"line_start":985,"line_end":985,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":430222,"byte_end":430230,"line_start":1015,"line_end":1015,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":430875,"byte_end":430883,"line_start":1037,"line_end":1037,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":431676,"byte_end":431693,"line_start":1061,"line_end":1061,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":432319,"byte_end":432333,"line_start":1082,"line_end":1082,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":433004,"byte_end":433011,"line_start":1103,"line_end":1103,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435345,"byte_end":435356,"line_start":1171,"line_end":1171,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435939,"byte_end":435940,"line_start":1193,"line_end":1193,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":436582,"byte_end":436590,"line_start":1213,"line_end":1213,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":437793,"byte_end":437802,"line_start":27,"line_end":27,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438603,"byte_end":438612,"line_start":64,"line_end":64,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438747,"byte_end":438756,"line_start":70,"line_end":70,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\backtrack.rs","byte_start":30909,"byte_end":30914,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\backtrack.rs","byte_start":31576,"byte_end":31583,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\cache.rs","byte_start":40081,"byte_end":40087,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\cache.rs","byte_start":40353,"byte_end":40364,"line_start":33,"line_end":33,"column_start":23,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":43361,"byte_end":43369,"line_start":39,"line_end":39,"column_start":6,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":72553,"byte_end":72557,"line_start":809,"line_end":809,"column_start":6,"column_end":10},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":72968,"byte_end":72977,"line_start":829,"line_end":829,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":75564,"byte_end":75572,"line_start":916,"line_end":916,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":76388,"byte_end":76400,"line_start":941,"line_end":941,"column_start":14,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":81152,"byte_end":81163,"line_start":1072,"line_end":1072,"column_start":6,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\compile.rs","byte_start":82372,"byte_end":82384,"line_start":1111,"line_end":1111,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":94901,"byte_end":94907,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":97240,"byte_end":97248,"line_start":287,"line_end":287,"column_start":23,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":233},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":97670,"byte_end":97675,"line_start":304,"line_end":304,"column_start":6,"column_end":11},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":101879,"byte_end":101884,"line_start":412,"line_end":412,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":102703,"byte_end":102713,"line_start":436,"line_end":436,"column_start":6,"column_end":16},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":103005,"byte_end":103008,"line_start":445,"line_end":445,"column_start":10,"column_end":13},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":151666,"byte_end":151674,"line_start":1609,"line_end":1609,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":152468,"byte_end":152479,"line_start":1645,"line_end":1645,"column_start":6,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":154307,"byte_end":154317,"line_start":1699,"line_end":1699,"column_start":6,"column_end":16},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":154753,"byte_end":154757,"line_start":1725,"line_end":1725,"column_start":6,"column_end":10},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":155369,"byte_end":155374,"line_start":1756,"line_end":1756,"column_start":21,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1584},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":155654,"byte_end":155665,"line_start":1766,"line_end":1766,"column_start":21,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":156087,"byte_end":156101,"line_start":1780,"line_end":1780,"column_start":25,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":327},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\dfa.rs","byte_start":156607,"byte_end":156617,"line_start":1798,"line_end":1798,"column_start":21,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1626},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":161277,"byte_end":161282,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1648},"to":{"krate":1,"index":1542}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":161652,"byte_end":161657,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1648},"to":{"krate":2,"index":6833}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\error.rs","byte_start":162314,"byte_end":162319,"line_start":51,"line_end":51,"column_start":21,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1648},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":167113,"byte_end":167124,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":176827,"byte_end":176840,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":389},"to":{"krate":0,"index":1067}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":177914,"byte_end":177924,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1662},"to":{"krate":0,"index":1067}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":188508,"byte_end":188518,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205760,"byte_end":205773,"line_start":1242,"line_end":1242,"column_start":10,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":205897,"byte_end":205901,"line_start":1248,"line_end":1248,"column_start":6,"column_end":10},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207732,"byte_end":207736,"line_start":1305,"line_end":1305,"column_start":16,"column_end":20},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":2056}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":207842,"byte_end":207854,"line_start":1311,"line_end":1311,"column_start":6,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\exec.rs","byte_start":215170,"byte_end":215187,"line_start":1510,"line_end":1510,"column_start":6,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\expand.rs","byte_start":222209,"byte_end":222212,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\expand.rs","byte_start":222308,"byte_end":222311,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":230897,"byte_end":230904,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":232141,"byte_end":232146,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":560}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234052,"byte_end":234061,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234235,"byte_end":234244,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1790},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":234350,"byte_end":234359,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1790},"to":{"krate":0,"index":560}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236561,"byte_end":236570,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236799,"byte_end":236808,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":236917,"byte_end":236926,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1802},"to":{"krate":0,"index":560}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240328,"byte_end":240332,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1814},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":240542,"byte_end":240546,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241787,"byte_end":241791,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1814},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":241885,"byte_end":241889,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1814},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":242012,"byte_end":242016,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1814},"to":{"krate":2,"index":1936}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\input.rs","byte_start":242269,"byte_end":242273,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1814},"to":{"krate":2,"index":1970}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":245153,"byte_end":245168,"line_start":44,"line_end":44,"column_start":6,"column_end":21},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":250008,"byte_end":250015,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1845},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":252207,"byte_end":252218,"line_start":243,"line_end":243,"column_start":23,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":685},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":253641,"byte_end":253654,"line_start":297,"line_end":297,"column_start":6,"column_end":19},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":257571,"byte_end":257582,"line_start":406,"line_end":406,"column_start":6,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\literal\\imp.rs","byte_start":262901,"byte_end":262917,"line_start":569,"line_end":569,"column_start":6,"column_end":22},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":285099,"byte_end":285104,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":285353,"byte_end":285356,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\pikevm.rs","byte_start":294531,"byte_end":294538,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":298309,"byte_end":298316,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":301297,"byte_end":301304,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1934},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":301480,"byte_end":301487,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1934},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":306575,"byte_end":306579,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":308970,"byte_end":308980,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\prog.rs","byte_start":310434,"byte_end":310443,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_builder.rs","byte_start":311094,"byte_end":311106,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2047},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330079,"byte_end":330084,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":330955,"byte_end":330960,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":2,"index":26074},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":331754,"byte_end":331759,"line_start":79,"line_end":79,"column_start":23,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2171},"to":{"krate":2,"index":6833}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":331936,"byte_end":331941,"line_start":86,"line_end":86,"column_start":21,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2171},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332246,"byte_end":332251,"line_start":97,"line_end":97,"column_start":21,"column_end":26},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2171},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332335,"byte_end":332340,"line_start":103,"line_end":103,"column_start":18,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2171},"to":{"krate":2,"index":6029}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":332551,"byte_end":332556,"line_start":113,"line_end":113,"column_start":6,"column_end":11},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":349008,"byte_end":349013,"line_start":532,"line_end":532,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":353077,"byte_end":353082,"line_start":652,"line_end":652,"column_start":6,"column_end":11},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":354594,"byte_end":354601,"line_start":694,"line_end":694,"column_start":27,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355195,"byte_end":355209,"line_start":714,"line_end":714,"column_start":27,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":917},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":355784,"byte_end":355789,"line_start":735,"line_end":735,"column_start":27,"column_end":32},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":356801,"byte_end":356807,"line_start":770,"line_end":770,"column_start":27,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":938},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":357699,"byte_end":357711,"line_start":802,"line_end":802,"column_start":23,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":948},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":359165,"byte_end":359181,"line_start":843,"line_end":843,"column_start":6,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":360919,"byte_end":360927,"line_start":891,"line_end":891,"column_start":10,"column_end":18},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":363872,"byte_end":363880,"line_start":960,"line_end":960,"column_start":25,"column_end":33},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":964},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":364107,"byte_end":364120,"line_start":968,"line_end":968,"column_start":29,"column_end":42},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":982},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":365611,"byte_end":365619,"line_start":1013,"line_end":1013,"column_start":27,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":964},"to":{"krate":2,"index":1677}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":366268,"byte_end":366276,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":964},"to":{"krate":2,"index":1677}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":367073,"byte_end":367090,"line_start":1059,"line_end":1059,"column_start":27,"column_end":44},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1010},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":369465,"byte_end":369476,"line_start":1129,"line_end":1129,"column_start":50,"column_end":61},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2183},"to":{"krate":0,"index":1022}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":370065,"byte_end":370066,"line_start":1151,"line_end":1151,"column_start":25,"column_end":26},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1039},"to":{"krate":0,"index":1022}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_bytes.rs","byte_start":370730,"byte_end":370738,"line_start":1171,"line_end":1171,"column_start":23,"column_end":31},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1042},"to":{"krate":0,"index":1022}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":386564,"byte_end":386573,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":388127,"byte_end":388145,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1059},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":389245,"byte_end":389250,"line_start":87,"line_end":87,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":1067}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391479,"byte_end":391486,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":391770,"byte_end":391777,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1078},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393004,"byte_end":393018,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_trait.rs","byte_start":393312,"byte_end":393326,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1095},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":394999,"byte_end":395004,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":395977,"byte_end":395982,"line_start":74,"line_end":74,"column_start":30,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":2,"index":26074},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398363,"byte_end":398368,"line_start":138,"line_end":138,"column_start":23,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":6833}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398545,"byte_end":398550,"line_start":145,"line_end":145,"column_start":21,"column_end":26},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398738,"byte_end":398743,"line_start":153,"line_end":153,"column_start":21,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":398827,"byte_end":398832,"line_start":159,"line_end":159,"column_start":18,"column_end":23},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2369},"to":{"krate":2,"index":6029}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":399043,"byte_end":399048,"line_start":169,"line_end":169,"column_start":6,"column_end":11},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":415504,"byte_end":415509,"line_start":591,"line_end":591,"column_start":6,"column_end":11},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":419563,"byte_end":419568,"line_start":711,"line_end":711,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":420948,"byte_end":420960,"line_start":751,"line_end":751,"column_start":23,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":421559,"byte_end":421564,"line_start":775,"line_end":775,"column_start":27,"column_end":32},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1214},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":422569,"byte_end":422575,"line_start":810,"line_end":810,"column_start":27,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":424271,"byte_end":424287,"line_start":860,"line_end":860,"column_start":6,"column_end":22},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":426014,"byte_end":426022,"line_start":908,"line_end":908,"column_start":10,"column_end":18},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":428927,"byte_end":428935,"line_start":977,"line_end":977,"column_start":25,"column_end":33},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1239},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":429162,"byte_end":429175,"line_start":985,"line_end":985,"column_start":29,"column_end":42},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1257},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":430222,"byte_end":430230,"line_start":1015,"line_end":1015,"column_start":27,"column_end":35},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1239},"to":{"krate":2,"index":1677}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":430875,"byte_end":430883,"line_start":1037,"line_end":1037,"column_start":33,"column_end":41},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1239},"to":{"krate":2,"index":1677}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":431676,"byte_end":431693,"line_start":1061,"line_end":1061,"column_start":27,"column_end":44},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1282},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":432319,"byte_end":432333,"line_start":1082,"line_end":1082,"column_start":27,"column_end":41},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":433004,"byte_end":433011,"line_start":1103,"line_end":1103,"column_start":27,"column_end":34},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1305},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435345,"byte_end":435356,"line_start":1171,"line_end":1171,"column_start":50,"column_end":61},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2381},"to":{"krate":0,"index":1316}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":435939,"byte_end":435940,"line_start":1193,"line_end":1193,"column_start":25,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1332},"to":{"krate":0,"index":1316}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\re_unicode.rs","byte_start":436582,"byte_end":436590,"line_start":1213,"line_end":1213,"column_start":23,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1335},"to":{"krate":0,"index":1316}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":437793,"byte_end":437802,"line_start":27,"line_end":27,"column_start":6,"column_end":15},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438603,"byte_end":438612,"line_start":64,"line_end":64,"column_start":21,"column_end":30},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2390},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-1.3.9\\src\\sparse.rs","byte_start":438747,"byte_end":438756,"line_start":70,"line_end":70,"column_start":16,"column_end":25},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2390},"to":{"krate":2,"index":1601}}]}
{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7","program":"C:\\Users\\1an6r_000\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","miniz_oxide","C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8bf896406e281130","-C","extra-filename=-8bf896406e281130","--out-dir","z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","-L","dependency=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","--extern","adler32=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libadler32-3df0fb615bcc4fd2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\1an6r_000\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libminiz_oxide-8bf896406e281130.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[17399634324349698997,6071993550999535355]},"crate_root":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src","external_crates":[{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[485752663891264790,8957311619763174036]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[18086859731710399847,10284985903167786594]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7894171165123925799,1138153282057520136]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13588323328630583110,6322937768936249793]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4981221114026975734,7560613652030165248]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14761482230397314318,7759443649452366185]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9184279872459162418,17237017963472574266]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17533675247542074538,1761975124356943313]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7993782675770172864,12706040849351126287]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2821791754508214868,4424070148662641494]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[910629799165843388,8471953781625026915]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[5889018422681230134,5892037208047200338]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2601722915210761880,4253013904849941641]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","num":14,"id":{"name":"adler32","disambiguator":[12013583614489530502,914115237765077220]}}],"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":158,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":887,"byte_end":901,"line_start":32,"line_end":32,"column_start":24,"column_end":38},"alias_span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":905,"byte_end":921,"line_start":32,"line_end":32,"column_start":42,"column_end":58},"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":947,"byte_end":962,"line_start":33,"line_end":33,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":964,"byte_end":986,"line_start":33,"line_end":33,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":158,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":336},{"krate":0,"index":529},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":831},{"krate":0,"index":860},{"krate":0,"index":859},{"krate":0,"index":857},{"krate":0,"index":855},{"krate":0,"index":853},{"krate":0,"index":850},{"krate":0,"index":540},{"krate":0,"index":862},{"krate":0,"index":882},{"krate":0,"index":881},{"krate":0,"index":879},{"krate":0,"index":877},{"krate":0,"index":875},{"krate":0,"index":872},{"krate":0,"index":884},{"krate":0,"index":916},{"krate":0,"index":915},{"krate":0,"index":913},{"krate":0,"index":911},{"krate":0,"index":909},{"krate":0,"index":906},{"krate":0,"index":918},{"krate":0,"index":933},{"krate":0,"index":932},{"krate":0,"index":930},{"krate":0,"index":928},{"krate":0,"index":926},{"krate":0,"index":923},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":935},{"krate":0,"index":950},{"krate":0,"index":949},{"krate":0,"index":947},{"krate":0,"index":944},{"krate":0,"index":942},{"krate":0,"index":939},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":769,"byte_end":792,"line_start":24,"line_end":24,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":45},{"krate":0,"index":317},{"krate":0,"index":332},{"krate":0,"index":650},{"krate":0,"index":679},{"krate":0,"index":678},{"krate":0,"index":676},{"krate":0,"index":674},{"krate":0,"index":672},{"krate":0,"index":669},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":76},{"krate":0,"index":566},{"krate":0,"index":571},{"krate":0,"index":569},{"krate":0,"index":78},{"krate":0,"index":572},{"krate":0,"index":598},{"krate":0,"index":597},{"krate":0,"index":595},{"krate":0,"index":593},{"krate":0,"index":591},{"krate":0,"index":588},{"krate":0,"index":600},{"krate":0,"index":623},{"krate":0,"index":622},{"krate":0,"index":620},{"krate":0,"index":618},{"krate":0,"index":616},{"krate":0,"index":613},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":625},{"krate":0,"index":648},{"krate":0,"index":647},{"krate":0,"index":645},{"krate":0,"index":643},{"krate":0,"index":641},{"krate":0,"index":638},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":123},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":155},{"krate":0,"index":159},{"krate":0,"index":165},{"krate":0,"index":171},{"krate":0,"index":177},{"krate":0,"index":183},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":243},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":263},{"krate":0,"index":281},{"krate":0,"index":286},{"krate":0,"index":293},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":21629,"byte_end":21642,"line_start":163,"line_end":163,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":21698,"byte_end":21721,"line_start":165,"line_end":165,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":21804,"byte_end":21825,"line_start":167,"line_end":167,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":21998,"byte_end":22023,"line_start":170,"line_end":170,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22177,"byte_end":22212,"line_start":173,"line_end":173,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22299,"byte_end":22316,"line_start":175,"line_end":175,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22408,"byte_end":22428,"line_start":177,"line_end":177,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22611,"byte_end":22640,"line_start":180,"line_end":180,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22744,"byte_end":22770,"line_start":182,"line_end":182,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23059,"byte_end":23066,"line_start":192,"line_end":192,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23133,"byte_end":23141,"line_start":194,"line_end":194,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23217,"byte_end":23228,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23323,"byte_end":23326,"line_start":198,"line_end":198,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23463,"byte_end":23468,"line_start":201,"line_end":201,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22984,"byte_end":23003,"line_start":190,"line_end":190,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"CompressionStrategy::{Default, Filtered, HuffmanOnly, RLE, Fixed}","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22911,"byte_end":22923,"line_start":188,"line_end":188,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22975,"byte_end":23475,"line_start":190,"line_end":202,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":22975,"byte_end":23475,"line_start":190,"line_end":202,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23685,"byte_end":23689,"line_start":209,"line_end":209,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Compress as much as there is space for, and then return\n waiting for more input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23768,"byte_end":23772,"line_start":211,"line_end":211,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Try to flush the current data and output an empty raw block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23898,"byte_end":23902,"line_start":214,"line_end":214,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Same as sync, but reset the dictionary so that the following data does not depend\n on previous data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23964,"byte_end":23970,"line_start":216,"line_end":216,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Try to flush everything and end the stream.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23572,"byte_end":23582,"line_start":206,"line_end":206,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"TDEFLFlush::{None, Sync, Full, Finish}","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23563,"byte_end":23977,"line_start":206,"line_end":217,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":23563,"byte_end":23977,"line_start":206,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24378,"byte_end":24381,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"fn (flush: i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24774,"byte_end":24782,"line_start":247,"line_end":247,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24793,"byte_end":24805,"line_start":248,"line_end":248,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24816,"byte_end":24820,"line_start":249,"line_end":249,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24830,"byte_end":24834,"line_start":250,"line_end":250,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24756,"byte_end":24767,"line_start":246,"line_end":246,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"TDEFLStatus::{BadParam, PutBufFailed, Okay, Done}","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24683,"byte_end":24695,"line_start":244,"line_end":244,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24747,"byte_end":24841,"line_start":246,"line_end":251,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24747,"byte_end":24841,"line_start":246,"line_end":251,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":29222,"byte_end":29237,"line_start":389,"line_end":389,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":29535,"byte_end":29538,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"fn (flags: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":29944,"byte_end":29951,"line_start":413,"line_end":413,"column_start":12,"column_end":19},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":30126,"byte_end":30144,"line_start":419,"line_end":419,"column_start":12,"column_end":30},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"fn (&self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":30383,"byte_end":30388,"line_start":427,"line_end":427,"column_start":12,"column_end":17},"name":"flags","qualname":"<CompressorOxide>::flags","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":30541,"byte_end":30552,"line_start":432,"line_end":432,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"fn (&self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":30862,"byte_end":30867,"line_start":443,"line_end":443,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":31403,"byte_end":31424,"line_start":457,"line_end":457,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"fn (&mut self, level: CompressionLevel) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":31843,"byte_end":31868,"line_start":467,"line_end":467,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"fn (&mut self, level: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":32460,"byte_end":32480,"line_start":481,"line_end":481,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"fn (&mut self, data_format: DataFormat, level: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":33384,"byte_end":33396,"line_start":509,"line_end":509,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":137}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":33411,"byte_end":33423,"line_start":510,"line_end":510,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> std::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":92007,"byte_end":92015,"line_start":2162,"line_end":2162,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"fn (d: &mut CompressorOxide, in_buf: &[u8], out_buf: &mut [u8], flush: TDEFLFlush) -> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":92567,"byte_end":92585,"line_start":2183,"line_end":2183,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"fn (d: &mut CompressorOxide, in_buf: &[u8], flush: TDEFLFlush, mut callback_func: impl FnMut(&[u8]) -> bool) -> (TDEFLStatus, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":96554,"byte_end":96587,"line_start":2302,"line_end":2302,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"fn (level: i32, window_bits: i32, strategy: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intented for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\stream.rs","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":326},{"krate":0,"index":331}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\stream.rs","byte_start":99871,"byte_end":99878,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"fn (compressor: &mut CompressorOxide, input: &[u8], output: &mut [u8], flush: MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given Compressor","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4865,"byte_end":4878,"line_start":15,"line_end":15,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4978,"byte_end":4987,"line_start":17,"line_end":17,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":5076,"byte_end":5091,"line_start":19,"line_end":19,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":5145,"byte_end":5160,"line_start":21,"line_end":21,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":5229,"byte_end":5241,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":5294,"byte_end":5312,"line_start":25,"line_end":25,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":650},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4775,"byte_end":4791,"line_start":13,"line_end":13,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"CompressionLevel::{NoCompression, BestSpeed, BestCompression, UberCompression, DefaultLevel, DefaultCompression}","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":663},{"krate":0,"index":666}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4702,"byte_end":4714,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4766,"byte_end":5320,"line_start":13,"line_end":26,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4766,"byte_end":5320,"line_start":13,"line_end":26,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":7407,"byte_end":7422,"line_start":107,"line_end":107,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"fn (input: &[u8], level: u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":7633,"byte_end":7653,"line_start":113,"line_end":113,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"fn (input: &[u8], level: u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":458},{"krate":0,"index":473},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":797},{"krate":0,"index":829},{"krate":0,"index":828},{"krate":0,"index":826},{"krate":0,"index":824},{"krate":0,"index":822},{"krate":0,"index":819},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":357},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":681},{"krate":0,"index":761},{"krate":0,"index":759},{"krate":0,"index":757},{"krate":0,"index":755},{"krate":0,"index":753},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":770},{"krate":0,"index":778},{"krate":0,"index":776},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":107433,"byte_end":107451,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111064,"byte_end":111077,"line_start":105,"line_end":105,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111140,"byte_end":111168,"line_start":107,"line_end":107,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111269,"byte_end":111294,"line_start":109,"line_end":109,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There is more input that hasn't been given to the decompressor yet.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111369,"byte_end":111409,"line_start":111,"line_end":111,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111503,"byte_end":111529,"line_start":113,"line_end":113,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we calculate the adler32 checksum of the output data?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":111789,"byte_end":111806,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":112987,"byte_end":112990,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"fn () -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113127,"byte_end":113131,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113106,"byte_end":113115,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113358,"byte_end":113365,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113337,"byte_end":113346,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":143476,"byte_end":143486,"line_start":1020,"line_end":1020,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"fn (r: &mut DecompressorOxide, in_buf: &[u8], out_cur: &mut Cursor<&mut [u8]>, flags: u32) -> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":491},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":182188,"byte_end":182200,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":183709,"byte_end":183712,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"fn (data_format: DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":184047,"byte_end":184056,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"fn (data_format: DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":184265,"byte_end":184277,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"fn (&mut self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":184442,"byte_end":184453,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"last_status","qualname":"<InflateState>::last_status","value":"fn (&self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":184779,"byte_end":184805,"line_start":92,"line_end":92,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"fn (window_bits: i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":185095,"byte_end":185100,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"fn (&mut self, data_format: DataFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":185838,"byte_end":185845,"line_start":121,"line_end":121,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"fn (state: &mut InflateState, input: &[u8], output: &mut [u8], flush: MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given `InflateState`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103678,"byte_end":103702,"line_start":25,"line_end":25,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was more data, so the\n input stream is likely truncated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103815,"byte_end":103823,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" One or more of the input parameters were invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103976,"byte_end":103991,"line_start":30,"line_end":30,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104085,"byte_end":104091,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104171,"byte_end":104175,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Finished decomression without issues.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104281,"byte_end":104295,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104413,"byte_end":104426,"line_start":38,"line_end":38,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103522,"byte_end":103533,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"TINFLStatus::{FailedCannotMakeProgress, BadParam, Adler32Mismatch, Failed, Done, NeedsMoreInput, HasMoreOutput}","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"repr(i8)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103450,"byte_end":103461,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103513,"byte_end":104466,"line_start":22,"line_end":39,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103513,"byte_end":104466,"line_start":22,"line_end":39,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104498,"byte_end":104506,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"fn (value: i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":105254,"byte_end":105271,"line_start":61,"line_end":61,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"fn (input: &[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":105237,"byte_end":105246,"line_start":60,"line_end":60,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":105559,"byte_end":105581,"line_start":69,"line_end":69,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"fn (input: &[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":105542,"byte_end":105551,"line_start":68,"line_end":68,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\shared.rs","byte_start":192393,"byte_end":192408,"line_start":4,"line_end":4,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\shared.rs","byte_start":192445,"byte_end":192467,"line_start":7,"line_end":7,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\shared.rs","byte_start":192621,"byte_end":192635,"line_start":14,"line_end":14,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"fn (adler: u32, data: &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1271,"byte_end":1275,"line_start":43,"line_end":43,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1350,"byte_end":1357,"line_start":46,"line_end":46,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as `Sync`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1491,"byte_end":1495,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1697,"byte_end":1701,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Same as `Sync`, but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.\n Has no use in decompression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1775,"byte_end":1781,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1816,"byte_end":1821,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":831},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1176,"byte_end":1183,"line_start":40,"line_end":40,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"MZFlush::{None, Partial, Sync, Full, Finish, Block}","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":847}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1103,"byte_end":1115,"line_start":38,"line_end":38,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1167,"byte_end":1828,"line_start":40,"line_end":58,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1167,"byte_end":1828,"line_start":40,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1971,"byte_end":1974,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"fn (flush: i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2376,"byte_end":2378,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":862},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2388,"byte_end":2397,"line_start":80,"line_end":80,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":862},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2407,"byte_end":2415,"line_start":81,"line_end":81,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":862},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2361,"byte_end":2369,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"MZStatus::{Ok, StreamEnd, NeedDict}","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":866},{"krate":0,"index":869}],"decl_id":null,"docs":" A list of miniz successful status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2288,"byte_end":2300,"line_start":76,"line_end":76,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2352,"byte_end":2422,"line_start":78,"line_end":82,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2352,"byte_end":2422,"line_start":78,"line_end":82,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2552,"byte_end":2557,"line_start":88,"line_end":88,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2568,"byte_end":2574,"line_start":89,"line_end":89,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2585,"byte_end":2589,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2600,"byte_end":2603,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2614,"byte_end":2617,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2628,"byte_end":2635,"line_start":93,"line_end":93,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2646,"byte_end":2651,"line_start":94,"line_end":94,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":884},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2538,"byte_end":2545,"line_start":87,"line_end":87,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"MZError::{ErrNo, Stream, Data, Mem, Buf, Version, Param}","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903}],"decl_id":null,"docs":" A list of miniz failed status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2465,"byte_end":2477,"line_start":85,"line_end":85,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2529,"byte_end":2664,"line_start":87,"line_end":95,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2529,"byte_end":2664,"line_start":87,"line_end":95,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2855,"byte_end":2859,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2886,"byte_end":2889,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2762,"byte_end":2772,"line_start":99,"line_end":99,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"DataFormat::{Zlib, Raw}","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":921}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2753,"byte_end":2892,"line_start":99,"line_end":104,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2753,"byte_end":2892,"line_start":99,"line_end":104,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3400,"byte_end":3408,"line_start":124,"line_end":124,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3594,"byte_end":3606,"line_start":128,"line_end":128,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3583,"byte_end":3852,"line_start":128,"line_end":135,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3583,"byte_end":3852,"line_start":128,"line_end":135,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3676,"byte_end":3690,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":935},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3764,"byte_end":3777,"line_start":132,"line_end":132,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":935},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3833,"byte_end":3839,"line_start":134,"line_end":134,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"std::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":935},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12404,"byte_end":12415,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12528,"byte_end":12539,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12806,"byte_end":12814,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24002,"byte_end":24012,"line_start":219,"line_end":219,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24354,"byte_end":24364,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":29340,"byte_end":29355,"line_start":396,"line_end":396,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":32819,"byte_end":32834,"line_start":492,"line_end":492,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":33471,"byte_end":33483,"line_start":513,"line_end":513,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":34156,"byte_end":34167,"line_start":537,"line_end":537,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":35069,"byte_end":35080,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":36049,"byte_end":36062,"line_start":605,"line_end":605,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":37602,"byte_end":37619,"line_start":659,"line_end":659,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":38903,"byte_end":38912,"line_start":709,"line_end":709,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":40672,"byte_end":40675,"line_start":760,"line_end":760,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":42364,"byte_end":42376,"line_start":807,"line_end":807,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":42641,"byte_end":42653,"line_start":817,"line_end":817,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":54971,"byte_end":54980,"line_start":1176,"line_end":1176,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":62187,"byte_end":62198,"line_start":1371,"line_end":1371,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":63911,"byte_end":63918,"line_start":1430,"line_end":1430,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":108029,"byte_end":108041,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":112890,"byte_end":112907,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113588,"byte_end":113605,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":115317,"byte_end":115322,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\output_buffer.rs","byte_start":180519,"byte_end":180531,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":182981,"byte_end":182993,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":183372,"byte_end":183384,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104473,"byte_end":104484,"line_start":41,"line_end":41,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1835,"byte_end":1842,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2899,"byte_end":2909,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3859,"byte_end":3871,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":4123,"byte_end":4131,"line_start":148,"line_end":148,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":4246,"byte_end":4254,"line_start":154,"line_end":154,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":825,"byte_end":832,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4404,"byte_end":4408,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":45}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\mod.rs","byte_start":4418,"byte_end":4424,"line_start":5,"line_end":5,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":317}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":842,"byte_end":849,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":336}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103056,"byte_end":103060,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":339}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":103089,"byte_end":103095,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":473}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12404,"byte_end":12415,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12528,"byte_end":12539,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\buffer.rs","byte_start":12806,"byte_end":12814,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":39},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24002,"byte_end":24012,"line_start":219,"line_end":219,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":600},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":24354,"byte_end":24364,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":29340,"byte_end":29355,"line_start":396,"line_end":396,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":32819,"byte_end":32834,"line_start":492,"line_end":492,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":118},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":33471,"byte_end":33483,"line_start":513,"line_end":513,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":34156,"byte_end":34167,"line_start":537,"line_end":537,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":35069,"byte_end":35080,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":36049,"byte_end":36062,"line_start":605,"line_end":605,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":37602,"byte_end":37619,"line_start":659,"line_end":659,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":38903,"byte_end":38912,"line_start":709,"line_end":709,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":40672,"byte_end":40675,"line_start":760,"line_end":760,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":42364,"byte_end":42376,"line_start":807,"line_end":807,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":42641,"byte_end":42653,"line_start":817,"line_end":817,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":54971,"byte_end":54980,"line_start":1176,"line_end":1176,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":62187,"byte_end":62198,"line_start":1371,"line_end":1371,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\deflate\\core.rs","byte_start":63911,"byte_end":63918,"line_start":1430,"line_end":1430,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":108029,"byte_end":108041,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":112890,"byte_end":112907,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":113588,"byte_end":113605,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":384},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\core.rs","byte_start":115317,"byte_end":115322,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\output_buffer.rs","byte_start":180519,"byte_end":180531,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":182981,"byte_end":182993,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\stream.rs","byte_start":183372,"byte_end":183384,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\inflate\\mod.rs","byte_start":104473,"byte_end":104484,"line_start":41,"line_end":41,"column_start":6,"column_end":17},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":1835,"byte_end":1842,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":2899,"byte_end":2909,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":3859,"byte_end":3871,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":4123,"byte_end":4131,"line_start":148,"line_end":148,"column_start":43,"column_end":51},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":545},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.3.7\\src\\lib.rs","byte_start":4246,"byte_end":4254,"line_start":154,"line_end":154,"column_start":44,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":545},"to":{"krate":2,"index":2096}}]}
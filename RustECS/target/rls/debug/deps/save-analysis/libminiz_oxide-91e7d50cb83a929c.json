{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1","program":"C:\\Users\\1an6r_000\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","miniz_oxide","C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=91e7d50cb83a929c","-C","extra-filename=-91e7d50cb83a929c","--out-dir","z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","-L","dependency=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps","--extern","adler=z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libadler-a21903ed4357a1ff.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\1an6r_000\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"z:\\GitRepositories\\RustECSPrototype\\hellorust\\target\\rls\\debug\\deps\\libminiz_oxide-91e7d50cb83a929c.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[12693039582109761595,16971857045366230954]},"crate_root":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src","external_crates":[{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[18086859731710399847,10284985903167786594]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7894171165123925799,1138153282057520136]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13588323328630583110,6322937768936249793]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4981221114026975734,7560613652030165248]}},{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\shared.rs","num":5,"id":{"name":"adler","disambiguator":[3214284866846747755,1550902857753283251]}}],"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":0,"byte_end":4545,"line_start":1,"line_end":166,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1105,"byte_end":1119,"line_start":40,"line_end":40,"column_start":24,"column_end":38},"alias_span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1123,"byte_end":1139,"line_start":40,"line_end":40,"column_start":42,"column_end":58},"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1165,"byte_end":1180,"line_start":41,"line_end":41,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1182,"byte_end":1204,"line_start":41,"line_end":41,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":0,"byte_end":4545,"line_start":1,"line_end":166,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":342},{"krate":0,"index":556},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":858},{"krate":0,"index":887},{"krate":0,"index":886},{"krate":0,"index":884},{"krate":0,"index":882},{"krate":0,"index":880},{"krate":0,"index":877},{"krate":0,"index":567},{"krate":0,"index":889},{"krate":0,"index":909},{"krate":0,"index":908},{"krate":0,"index":906},{"krate":0,"index":904},{"krate":0,"index":902},{"krate":0,"index":899},{"krate":0,"index":911},{"krate":0,"index":943},{"krate":0,"index":942},{"krate":0,"index":940},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":933},{"krate":0,"index":945},{"krate":0,"index":960},{"krate":0,"index":959},{"krate":0,"index":957},{"krate":0,"index":955},{"krate":0,"index":953},{"krate":0,"index":950},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":962},{"krate":0,"index":977},{"krate":0,"index":976},{"krate":0,"index":974},{"krate":0,"index":971},{"krate":0,"index":969},{"krate":0,"index":966},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"allow(warnings)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":769,"byte_end":788,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":789,"byte_end":812,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":865,"byte_end":871,"line_start":26,"line_end":26,"column_start":53,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":48},{"krate":0,"index":323},{"krate":0,"index":338},{"krate":0,"index":677},{"krate":0,"index":706},{"krate":0,"index":705},{"krate":0,"index":703},{"krate":0,"index":701},{"krate":0,"index":699},{"krate":0,"index":696},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":78},{"krate":0,"index":593},{"krate":0,"index":598},{"krate":0,"index":596},{"krate":0,"index":80},{"krate":0,"index":599},{"krate":0,"index":625},{"krate":0,"index":624},{"krate":0,"index":622},{"krate":0,"index":620},{"krate":0,"index":618},{"krate":0,"index":615},{"krate":0,"index":627},{"krate":0,"index":650},{"krate":0,"index":649},{"krate":0,"index":647},{"krate":0,"index":645},{"krate":0,"index":643},{"krate":0,"index":640},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":652},{"krate":0,"index":675},{"krate":0,"index":674},{"krate":0,"index":672},{"krate":0,"index":670},{"krate":0,"index":668},{"krate":0,"index":665},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":167},{"krate":0,"index":173},{"krate":0,"index":180},{"krate":0,"index":186},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":228},{"krate":0,"index":249},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":269},{"krate":0,"index":287},{"krate":0,"index":292},{"krate":0,"index":299},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22075,"byte_end":22088,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22144,"byte_end":22167,"line_start":170,"line_end":170,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22250,"byte_end":22271,"line_start":172,"line_end":172,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22444,"byte_end":22469,"line_start":175,"line_end":175,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22623,"byte_end":22658,"line_start":178,"line_end":178,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22745,"byte_end":22762,"line_start":180,"line_end":180,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":22854,"byte_end":22874,"line_start":182,"line_end":182,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23057,"byte_end":23086,"line_start":185,"line_end":185,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23190,"byte_end":23216,"line_start":187,"line_end":187,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23505,"byte_end":23512,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23579,"byte_end":23587,"line_start":199,"line_end":199,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23663,"byte_end":23674,"line_start":201,"line_end":201,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23769,"byte_end":23772,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23909,"byte_end":23914,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23430,"byte_end":23449,"line_start":195,"line_end":195,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"CompressionStrategy::{Default, Filtered, HuffmanOnly, RLE, Fixed}","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23357,"byte_end":23369,"line_start":193,"line_end":193,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23421,"byte_end":23921,"line_start":195,"line_end":207,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":23421,"byte_end":23921,"line_start":195,"line_end":207,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24131,"byte_end":24135,"line_start":214,"line_end":214,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Compress as much as there is space for, and then return\n waiting for more input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24214,"byte_end":24218,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Try to flush the current data and output an empty raw block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24344,"byte_end":24348,"line_start":219,"line_end":219,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Same as sync, but reset the dictionary so that the following data does not depend\n on previous data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24410,"byte_end":24416,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":" Try to flush everything and end the stream.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24018,"byte_end":24028,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"TDEFLFlush::{None, Sync, Full, Finish}","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24009,"byte_end":24423,"line_start":211,"line_end":222,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24009,"byte_end":24423,"line_start":211,"line_end":222,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24824,"byte_end":24827,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"fn (flush: i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25220,"byte_end":25228,"line_start":252,"line_end":252,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":652},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25239,"byte_end":25251,"line_start":253,"line_end":253,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":652},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25262,"byte_end":25266,"line_start":254,"line_end":254,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":652},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25276,"byte_end":25280,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":652},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25202,"byte_end":25213,"line_start":251,"line_end":251,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"TDEFLStatus::{BadParam, PutBufFailed, Okay, Done}","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":662}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25129,"byte_end":25141,"line_start":249,"line_end":249,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25193,"byte_end":25287,"line_start":251,"line_end":256,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":25193,"byte_end":25287,"line_start":251,"line_end":256,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":29668,"byte_end":29683,"line_start":394,"line_end":394,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":29981,"byte_end":29984,"line_start":406,"line_end":406,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"fn (flags: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":30390,"byte_end":30397,"line_start":418,"line_end":418,"column_start":12,"column_end":19},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":30572,"byte_end":30590,"line_start":424,"line_end":424,"column_start":12,"column_end":30},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"fn (&self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":30829,"byte_end":30834,"line_start":432,"line_end":432,"column_start":12,"column_end":17},"name":"flags","qualname":"<CompressorOxide>::flags","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":30987,"byte_end":30998,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"fn (&self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":31308,"byte_end":31313,"line_start":448,"line_end":448,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":31849,"byte_end":31870,"line_start":462,"line_end":462,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"fn (&mut self, level: CompressionLevel) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":32289,"byte_end":32314,"line_start":472,"line_end":472,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"fn (&mut self, level: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":32906,"byte_end":32926,"line_start":486,"line_end":486,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"fn (&mut self, data_format: DataFormat, level: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33830,"byte_end":33842,"line_start":514,"line_end":514,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":139}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33857,"byte_end":33869,"line_start":515,"line_end":515,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> core::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":137},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":92638,"byte_end":92646,"line_start":2180,"line_end":2180,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"fn (d: &mut CompressorOxide, in_buf: &[u8], out_buf: &mut [u8], flush: TDEFLFlush) -> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":93198,"byte_end":93216,"line_start":2201,"line_end":2201,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"fn (d: &mut CompressorOxide, in_buf: &[u8], flush: TDEFLFlush, mut callback_func: impl FnMut(&[u8]) -> bool) -> (TDEFLStatus, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":97185,"byte_end":97218,"line_start":2320,"line_end":2320,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"fn (level: i32, window_bits: i32, strategy: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intented for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\stream.rs","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":332},{"krate":0,"index":337}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\stream.rs","byte_start":100550,"byte_end":100557,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"fn (compressor: &mut CompressorOxide, input: &[u8], output: &mut [u8], flush: MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given Compressor","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5137,"byte_end":5150,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5250,"byte_end":5259,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5348,"byte_end":5363,"line_start":22,"line_end":22,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5417,"byte_end":5432,"line_start":24,"line_end":24,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5501,"byte_end":5513,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5566,"byte_end":5584,"line_start":28,"line_end":28,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5047,"byte_end":5063,"line_start":16,"line_end":16,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"CompressionLevel::{NoCompression, BestSpeed, BestCompression, UberCompression, DefaultLevel, DefaultCompression}","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":4974,"byte_end":4986,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5038,"byte_end":5592,"line_start":16,"line_end":29,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":5038,"byte_end":5592,"line_start":16,"line_end":29,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":7679,"byte_end":7694,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"fn (input: &[u8], level: u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":7905,"byte_end":7925,"line_start":116,"line_end":116,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"fn (input: &[u8], level: u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":466},{"krate":0,"index":481},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":824},{"krate":0,"index":856},{"krate":0,"index":855},{"krate":0,"index":853},{"krate":0,"index":851},{"krate":0,"index":849},{"krate":0,"index":846},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":366},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":414},{"krate":0,"index":418},{"krate":0,"index":708},{"krate":0,"index":788},{"krate":0,"index":786},{"krate":0,"index":784},{"krate":0,"index":782},{"krate":0,"index":780},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":797},{"krate":0,"index":805},{"krate":0,"index":803},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":110174,"byte_end":110192,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":113805,"byte_end":113818,"line_start":105,"line_end":105,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":113881,"byte_end":113909,"line_start":107,"line_end":107,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":114010,"byte_end":114035,"line_start":109,"line_end":109,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There is more input that hasn't been given to the decompressor yet.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":114110,"byte_end":114150,"line_start":111,"line_end":111,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":114244,"byte_end":114270,"line_start":113,"line_end":113,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we calculate the adler32 checksum of the output data?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":114530,"byte_end":114547,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":115728,"byte_end":115731,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"fn () -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":115868,"byte_end":115872,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":115847,"byte_end":115856,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":116099,"byte_end":116106,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":116078,"byte_end":116087,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":146217,"byte_end":146227,"line_start":1020,"line_end":1020,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"fn (r: &mut DecompressorOxide, in_buf: &[u8], out: &mut [u8], out_pos: usize, flags: u32) -> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184196,"byte_end":184207,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ResetPolicy","qualname":"::inflate::stream::ResetPolicy","value":"ResetPolicy","parent":null,"children":[{"krate":0,"index":500}],"decl_id":null,"docs":" Tag that determines reset policy of [InflateState](struct.InflateState.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184240,"byte_end":184245,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"reset","qualname":"::inflate::stream::ResetPolicy::reset","value":"fn (&self, state: &mut InflateState) -> ()","parent":{"krate":0,"index":499},"children":[],"decl_id":null,"docs":" Performs reset\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184467,"byte_end":184475,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"MinReset","qualname":"::inflate::stream::MinReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state, without performing expensive ops (e.g. zeroing buffer)","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184872,"byte_end":184881,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"ZeroReset","qualname":"::inflate::stream::ZeroReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state and zero memory, continuing to use the same data format.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":185176,"byte_end":185185,"line_start":47,"line_end":47,"column_start":12,"column_end":21},"name":"FullReset","qualname":"::inflate::stream::FullReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Full reset of the state, including zeroing memory.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":185475,"byte_end":185487,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":186996,"byte_end":186999,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"fn (data_format: DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":187334,"byte_end":187343,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"fn (data_format: DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":187552,"byte_end":187564,"line_start":124,"line_end":124,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"fn (&mut self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":187729,"byte_end":187740,"line_start":129,"line_end":129,"column_start":12,"column_end":23},"name":"last_status","qualname":"<InflateState>::last_status","value":"fn (&self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":188066,"byte_end":188092,"line_start":138,"line_end":138,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"fn (window_bits: i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":188396,"byte_end":188401,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"fn (&mut self, data_format: DataFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":188277,"byte_end":188286,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":188575,"byte_end":188583,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"reset_as","qualname":"<InflateState>::reset_as","value":"fn <T> (&mut self, policy: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state according to specified policy.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":188498,"byte_end":188507,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":189051,"byte_end":189058,"line_start":167,"line_end":167,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"fn (state: &mut InflateState, input: &[u8], output: &mut [u8], flush: MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given `InflateState`","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104490,"byte_end":104514,"line_start":28,"line_end":28,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was more data, so the\n input stream is likely truncated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104627,"byte_end":104635,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" One or more of the input parameters were invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104788,"byte_end":104803,"line_start":33,"line_end":33,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":834},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104897,"byte_end":104903,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":837},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104983,"byte_end":104987,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Finished decomression without issues.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":105093,"byte_end":105107,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":105225,"byte_end":105238,"line_start":41,"line_end":41,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104334,"byte_end":104345,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"TINFLStatus::{FailedCannotMakeProgress, BadParam, Adler32Mismatch, Failed, Done, NeedsMoreInput, HasMoreOutput}","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"repr(i8)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104262,"byte_end":104273,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104325,"byte_end":105278,"line_start":25,"line_end":42,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":104325,"byte_end":105278,"line_start":25,"line_end":42,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":105310,"byte_end":105318,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"fn (value: i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106066,"byte_end":106083,"line_start":64,"line_end":64,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"fn (input: &[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106049,"byte_end":106058,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106391,"byte_end":106413,"line_start":72,"line_end":72,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"fn (input: &[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106374,"byte_end":106383,"line_start":71,"line_end":71,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106916,"byte_end":106944,"line_start":86,"line_end":86,"column_start":8,"column_end":36},"name":"decompress_to_vec_with_limit","qualname":"::inflate::decompress_to_vec_with_limit","value":"fn (input: &[u8], max_size: usize) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n `TINFLStatus::HasMoreOutput` error is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":106899,"byte_end":106908,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":107403,"byte_end":107436,"line_start":96,"line_end":96,"column_start":8,"column_end":41},"name":"decompress_to_vec_zlib_with_limit","qualname":"::inflate::decompress_to_vec_zlib_with_limit","value":"fn (input: &[u8], max_size: usize) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n `TINFLStatus::HasMoreOutput` error is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":107386,"byte_end":107395,"line_start":95,"line_end":95,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\shared.rs","byte_start":196028,"byte_end":196043,"line_start":4,"line_end":4,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\shared.rs","byte_start":196080,"byte_end":196102,"line_start":7,"line_end":7,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\shared.rs","byte_start":196256,"byte_end":196270,"line_start":14,"line_end":14,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"fn (adler: u32, data: &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1489,"byte_end":1493,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1568,"byte_end":1575,"line_start":54,"line_end":54,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as `Sync`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1709,"byte_end":1713,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1915,"byte_end":1919,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Same as `Sync`, but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.\n Has no use in decompression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1993,"byte_end":1999,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2034,"byte_end":2039,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1394,"byte_end":1401,"line_start":48,"line_end":48,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"MZFlush::{None, Partial, Sync, Full, Finish, Block}","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1321,"byte_end":1333,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1385,"byte_end":2046,"line_start":48,"line_end":66,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1385,"byte_end":2046,"line_start":48,"line_end":66,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2189,"byte_end":2192,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"fn (flush: i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2594,"byte_end":2596,"line_start":87,"line_end":87,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2606,"byte_end":2615,"line_start":88,"line_end":88,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2625,"byte_end":2633,"line_start":89,"line_end":89,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2579,"byte_end":2587,"line_start":86,"line_end":86,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"MZStatus::{Ok, StreamEnd, NeedDict}","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896}],"decl_id":null,"docs":" A list of miniz successful status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2506,"byte_end":2518,"line_start":84,"line_end":84,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2570,"byte_end":2640,"line_start":86,"line_end":90,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2570,"byte_end":2640,"line_start":86,"line_end":90,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2770,"byte_end":2775,"line_start":96,"line_end":96,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2786,"byte_end":2792,"line_start":97,"line_end":97,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2803,"byte_end":2807,"line_start":98,"line_end":98,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2818,"byte_end":2821,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2832,"byte_end":2835,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2846,"byte_end":2853,"line_start":101,"line_end":101,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2864,"byte_end":2869,"line_start":102,"line_end":102,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2756,"byte_end":2763,"line_start":95,"line_end":95,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"MZError::{ErrNo, Stream, Data, Mem, Buf, Version, Param}","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930}],"decl_id":null,"docs":" A list of miniz failed status codes.\n","sig":null,"attributes":[{"value":"repr(i32)","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2683,"byte_end":2695,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2747,"byte_end":2882,"line_start":95,"line_end":103,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2747,"byte_end":2882,"line_start":95,"line_end":103,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3073,"byte_end":3077,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":945},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3104,"byte_end":3107,"line_start":111,"line_end":111,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":945},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2980,"byte_end":2990,"line_start":107,"line_end":107,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"DataFormat::{Zlib, Raw}","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":948}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2971,"byte_end":3110,"line_start":107,"line_end":112,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2971,"byte_end":3110,"line_start":107,"line_end":112,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3618,"byte_end":3626,"line_start":132,"line_end":132,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3812,"byte_end":3824,"line_start":136,"line_end":136,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3801,"byte_end":4070,"line_start":136,"line_end":143,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3801,"byte_end":4070,"line_start":136,"line_end":143,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3894,"byte_end":3908,"line_start":138,"line_end":138,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3982,"byte_end":3995,"line_start":140,"line_end":140,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4051,"byte_end":4057,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"core::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":12697,"byte_end":12708,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":12821,"byte_end":12832,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":13099,"byte_end":13107,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24448,"byte_end":24458,"line_start":224,"line_end":224,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24800,"byte_end":24810,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":29786,"byte_end":29801,"line_start":401,"line_end":401,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33265,"byte_end":33280,"line_start":497,"line_end":497,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33917,"byte_end":33929,"line_start":518,"line_end":518,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":34602,"byte_end":34613,"line_start":542,"line_end":542,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":35492,"byte_end":35503,"line_start":574,"line_end":574,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":36456,"byte_end":36469,"line_start":610,"line_end":610,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":38027,"byte_end":38044,"line_start":665,"line_end":665,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":39249,"byte_end":39258,"line_start":714,"line_end":714,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":41078,"byte_end":41081,"line_start":766,"line_end":766,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":43094,"byte_end":43106,"line_start":826,"line_end":826,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":43371,"byte_end":43383,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":55621,"byte_end":55630,"line_start":1194,"line_end":1194,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":62837,"byte_end":62848,"line_start":1389,"line_end":1389,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":64561,"byte_end":64568,"line_start":1448,"line_end":1448,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":110770,"byte_end":110782,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":115631,"byte_end":115648,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":116329,"byte_end":116346,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":118058,"byte_end":118063,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\output_buffer.rs","byte_start":182529,"byte_end":182541,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184499,"byte_end":184507,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184905,"byte_end":184914,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":185221,"byte_end":185230,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":186268,"byte_end":186280,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":186659,"byte_end":186671,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":105285,"byte_end":105296,"line_start":44,"line_end":44,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2053,"byte_end":2060,"line_start":68,"line_end":68,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3117,"byte_end":3127,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4077,"byte_end":4089,"line_start":145,"line_end":145,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4342,"byte_end":4350,"line_start":156,"line_end":156,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4466,"byte_end":4474,"line_start":162,"line_end":162,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1043,"byte_end":1050,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":4676,"byte_end":4680,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\mod.rs","byte_start":4690,"byte_end":4696,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":323}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":1060,"byte_end":1067,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":342}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":103868,"byte_end":103872,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":348}},{"kind":"Mod","span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":103901,"byte_end":103907,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":481}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":12697,"byte_end":12708,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":12821,"byte_end":12832,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":28},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\buffer.rs","byte_start":13099,"byte_end":13107,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24448,"byte_end":24458,"line_start":224,"line_end":224,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":24800,"byte_end":24810,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":29786,"byte_end":29801,"line_start":401,"line_end":401,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33265,"byte_end":33280,"line_start":497,"line_end":497,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":120},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":33917,"byte_end":33929,"line_start":518,"line_end":518,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":34602,"byte_end":34613,"line_start":542,"line_end":542,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":35492,"byte_end":35503,"line_start":574,"line_end":574,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":36456,"byte_end":36469,"line_start":610,"line_end":610,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":38027,"byte_end":38044,"line_start":665,"line_end":665,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":39249,"byte_end":39258,"line_start":714,"line_end":714,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":41078,"byte_end":41081,"line_start":766,"line_end":766,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":43094,"byte_end":43106,"line_start":826,"line_end":826,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":197},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":43371,"byte_end":43383,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":55621,"byte_end":55630,"line_start":1194,"line_end":1194,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":62837,"byte_end":62848,"line_start":1389,"line_end":1389,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\deflate\\core.rs","byte_start":64561,"byte_end":64568,"line_start":1448,"line_end":1448,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":110770,"byte_end":110782,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":115631,"byte_end":115648,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":116329,"byte_end":116346,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":393},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\core.rs","byte_start":118058,"byte_end":118063,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\output_buffer.rs","byte_start":182529,"byte_end":182541,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184499,"byte_end":184507,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":501},"to":{"krate":0,"index":499}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":184905,"byte_end":184914,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":499}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":185221,"byte_end":185230,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":510},"to":{"krate":0,"index":499}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":186268,"byte_end":186280,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":515},"to":{"krate":1,"index":2080}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\stream.rs","byte_start":186659,"byte_end":186671,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\inflate\\mod.rs","byte_start":105285,"byte_end":105296,"line_start":44,"line_end":44,"column_start":6,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":2053,"byte_end":2060,"line_start":68,"line_end":68,"column_start":6,"column_end":13},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":3117,"byte_end":3127,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4077,"byte_end":4089,"line_start":145,"line_end":145,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":962},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4342,"byte_end":4350,"line_start":156,"line_end":156,"column_start":44,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":572},"to":{"krate":1,"index":2096}},{"span":{"file_name":"C:\\Users\\1an6r_000\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\miniz_oxide-0.4.1\\src\\lib.rs","byte_start":4466,"byte_end":4474,"line_start":162,"line_end":162,"column_start":45,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":572},"to":{"krate":1,"index":2096}}]}